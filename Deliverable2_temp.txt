Problem Statement :
Our goal is to create a machine learning model that can predict tomrrow's stock price based on past stock price trends. As the stock market can often be determinisic due to periodic trends and other factors, we aim to predict certain market metrics such as trading volume and stock price (daily open, close, high, low).

Data Preprocessing:
For this project, we will be working with the Alpha Vantage API to access real-time and historical stock data, including metrics like open, high, low, close prices, and volume. This data is crucial for our machine learning model, which predicts future stock prices. The current dataset has ...
/describe and justify preprocessing methods/

Machine Learning Model:
a) Framework :
The code uses the Keras library to implement our LTSM model. Various libraries were used, including Pandas for data manipulation, NumPy for numerical operations, and scikit-learn's MinMaxScaler for data normalization.
Model Architecture:
The model is designed for time series prediction, particularly for predicting stock prices.
Three LSTM (Long Short-Term Memory) Layers: Each LSTM layer has 50 units. These LSTM layers are used for learning patterns and dependencies in the time series data.
Dropout Layers: A Dropout layer with a dropout rate of 0.2 is added after each LSTM layer to prevent overfitting.
Output Layer: The final output layer is a Dense layer with a single unit used for regression to predict the stock's closing price.

b)Dropout layers with a dropout rate of 0.2 were added after each LSTM layer. The Adam optimizer was chosen for training the model, using stochastic gradient descent. For hyperparameters, we have used 50 LTSM units per layer. Our batch size and epochs are variable parameters that are yet to be fully optimized. Finally, as adam optimizes for learning rate, we do not include it in this section.


Preliminary results:
As discussed in deliverable 1, we used Mean Square Error to evaluate the model's accuracy and precision in predicting daily market metrics. Testing with larger batch sizes (64, 128, 256) yielded high MSE values, so we reduced the number to attempt to better predict prices. Moreover, it seemed that the optimal epoch number was around 100, as below and above values would lead to higher MSE values. As shown in graphs in the Jupyter Notebook folder, we've documented this testing and provided visualization for testing. 

Next steps:
/discuss model performance/
In our initial project proposal, we planned on providing sentiment analysis based on X (formerly Twitter) posts. Up until this point, we have based our model on pure statistic predictions. However, we hope incorporating value based training anaylsis will further improve our predictions. Public sentiment, shaped by collective emotions and perceptions, significantly impacts stock prices. Positive sentiment drives demand and raises prices, reflecting confidence in a company's prospects. Conversely, negative sentiment reduces demand, leading to price declines. As X is most often associated with being the contemporary equivalent of the traditional "town square" for public discourse. It is a virtual platform where people gather to express their opinions, share information, and engage in discussions. This is why we believe incorporating sentiment analysis in the future will vastly improve our model. 

